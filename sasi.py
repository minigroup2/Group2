#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.24.1
#  in conjunction with Tcl version 8.6
#    Sep 23, 2019 03:06:19 PM PDT  platform: Windows NT

import sys
import tkinter.messagebox
import cv2
import numpy as np
import os
from os.path import isfile, join
import natsort
from hashlib import md5
from base64 import b64decode
from base64 import b64encode

from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from Crypto.Util.Padding import pad, unpad

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import sasi_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    sasi_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    sasi_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("876x646+498+150")
        top.title("Video Stagnography")
        top.configure(background="#d8d8d8")

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.046, rely=0.077, relheight=0.673
                , relwidth=0.234)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#ffffff")
        self.Frame1.configure(width=205)

        self.Button1 = tk.Button(self.Frame1)
        self.Button1.place(relx=0.146, rely=0.069, height=33, width=136)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(command=self.toframe,text='''Browse''')
        self.Button1.configure(width=136)

        self.Button2 = tk.Button(self.Frame1)
        self.Button2.place(relx=0.146, rely=0.23, height=33, width=136)
        self.Button2.configure(activebackground="#ececec")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(command=self.aesencr,text='''Message''')
        self.Button2.configure(width=136)

        self.Button2_1 = tk.Button(self.Frame1)
        self.Button2_1.place(relx=0.146, rely=0.598, height=33, width=136)
        self.Button2_1.configure(activebackground="#ececec")
        self.Button2_1.configure(activeforeground="#000000")
        self.Button2_1.configure(background="#d9d9d9")
        self.Button2_1.configure(disabledforeground="#a3a3a3")
        self.Button2_1.configure(foreground="#000000")
        self.Button2_1.configure(highlightbackground="#d9d9d9")
        self.Button2_1.configure(highlightcolor="black")
        self.Button2_1.configure(pady="0")
        self.Button2_1.configure(text='''Decryption''')
        self.Button2_1.configure(width=136)

        self.Button3 = tk.Button(self.Frame1)
        self.Button3.place(relx=0.146, rely=0.805, height=33, width=136)
        self.Button3.configure(activebackground="#ececec")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#d9d9d9")
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(foreground="#000000")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(command=self.hidee,text='''View Message''')
        self.Button3.configure(width=136)

        self.Button4 = tk.Button(self.Frame1)
        self.Button4.place(relx=0.146, rely=0.414, height=33, width=136)
        self.Button4.configure(activebackground="#ececec")
        self.Button4.configure(activeforeground="#000000")
        self.Button4.configure(background="#d9d9d9")
        self.Button4.configure(disabledforeground="#a3a3a3")
        self.Button4.configure(foreground="#000000")
        self.Button4.configure(highlightbackground="#d9d9d9")
        self.Button4.configure(highlightcolor="black")
        self.Button4.configure(pady="0")
        self.Button4.configure(command=self.tovideo,text='''Encryption''')
        self.Button4.configure(width=136)

        self.Frame2 = tk.Frame(top)
        self.Frame2.place(relx=0.331, rely=0.093, relheight=0.55, relwidth=0.622)

        self.Frame2.configure(relief='groove')
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief="groove")
        self.Frame2.configure(background="#ffffff")
        self.Frame2.configure(width=545)

        self.Frame3 = tk.Frame(top)
        self.Frame3.place(relx=0.365, rely=0.805, relheight=0.163
                , relwidth=0.588)
        self.Frame3.configure(relief='groove')
        self.Frame3.configure(borderwidth="2")
        self.Frame3.configure(relief="groove")
        self.Frame3.configure(background="#ffffff")
        self.Frame3.configure(width=515)

        self.Button5 = tk.Button(self.Frame3)
        self.Button5.place(relx=0.078, rely=0.381, height=33, width=96)
        self.Button5.configure(activebackground="#ececec")
        self.Button5.configure(activeforeground="#000000")
        self.Button5.configure(background="#d9d9d9")
        self.Button5.configure(disabledforeground="#a3a3a3")
        self.Button5.configure(foreground="#000000")
        self.Button5.configure(highlightbackground="#d9d9d9")
        self.Button5.configure(highlightcolor="#000000")
        self.Button5.configure(pady="0")
        self.Button5.configure(text='''Validate''')
        self.Button5.configure(width=96)

        self.Button5_2 = tk.Button(self.Frame3)
        self.Button5_2.place(relx=0.369, rely=0.381, height=33, width=106)
        self.Button5_2.configure(activebackground="#ececec")
        self.Button5_2.configure(activeforeground="#000000")
        self.Button5_2.configure(background="#d9d9d9")
        self.Button5_2.configure(disabledforeground="#a3a3a3")
        self.Button5_2.configure(foreground="#000000")
        self.Button5_2.configure(highlightbackground="#d9d9d9")
        self.Button5_2.configure(highlightcolor="black")
        self.Button5_2.configure(pady="0")
        self.Button5_2.configure(command=self.chc,text='''Clear''')
        self.Button5_2.configure(width=106)

        self.Button5_3 = tk.Button(self.Frame3)
        self.Button5_3.place(relx=0.699, rely=0.381, height=33, width=106)
        self.Button5_3.configure(activebackground="#ececec")
        self.Button5_3.configure(activeforeground="#000000")
        self.Button5_3.configure(background="#d9d9d9")
        self.Button5_3.configure(disabledforeground="#a3a3a3")
        self.Button5_3.configure(foreground="#000000")
        self.Button5_3.configure(highlightbackground="#d9d9d9")
        self.Button5_3.configure(highlightcolor="black")
        self.Button5_3.configure(pady="0")
        self.Button5_3.configure(command=self.exitt,text='''Exit''')
        self.Button5_3.configure(width=106)

        self.Frame4 = tk.Frame(top)
        self.Frame4.place(relx=0.046, rely=0.789, relheight=0.163
                , relwidth=0.234)
        self.Frame4.configure(relief='groove')
        self.Frame4.configure(borderwidth="2")
        self.Frame4.configure(relief="groove")
        self.Frame4.configure(background="#d9d9d9")
        self.Frame4.configure(width=205)

        self.Label1 = tk.Label(self.Frame4)
        self.Label1.place(relx=0.049, rely=0.19, height=26, width=42)
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''PSNR''')

        self.Label2 = tk.Label(self.Frame4)
        self.Label2.place(relx=0.049, rely=0.571, height=26, width=24)
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(text='''CR''')

        self.Text1 = tk.Text(self.Frame4)
        self.Text1.place(relx=0.439, rely=0.19, relheight=0.324, relwidth=0.41)
        self.Text1.configure(background="#ffffffffffff")
        self.Text1.configure(font="TkTextFont")
        self.Text1.configure(foreground="black")
        self.Text1.configure(highlightbackground="#d9d9d9")
        self.Text1.configure(highlightcolor="black")
        self.Text1.configure(insertbackground="black")
        self.Text1.configure(selectbackground="#c4c4c4")
        self.Text1.configure(selectforeground="black")
        self.Text1.configure(width=84)
        self.Text1.configure(wrap="word")

        self.Text2 = tk.Text(self.Frame4)
        self.Text2.place(relx=0.439, rely=0.571, relheight=0.324, relwidth=0.41)
        self.Text2.configure(background="white")
        self.Text2.configure(font="TkTextFont")
        self.Text2.configure(foreground="black")
        self.Text2.configure(highlightbackground="#d9d9d9")
        self.Text2.configure(highlightcolor="black")
        self.Text2.configure(insertbackground="black")
        self.Text2.configure(selectbackground="#c4c4c4")
        self.Text2.configure(selectforeground="black")
        self.Text2.configure(width=84)
        self.Text2.configure(wrap="word")

        self.Button6 = tk.Button(top)
        self.Button6.place(relx=0.548, rely=0.681, height=33, width=116)
        self.Button6.configure(activebackground="#ececec")
        self.Button6.configure(activeforeground="#000000")
        self.Button6.configure(background="#d9d9d9")
        self.Button6.configure(disabledforeground="#a3a3a3")
        self.Button6.configure(foreground="#000000")
        self.Button6.configure(highlightbackground="#d9d9d9")
        self.Button6.configure(highlightcolor="black")
        self.Button6.configure(pady="0")
        self.Button6.configure(text='''Play''')
        self.Button6.configure(width=116)

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)



    def tovideo(self):
        #tkinter.messagebox.showerror("SAMPLE")
        fil = []
        pathIn = 'C:/Users/jithu/PycharmProjects/j/im/'
        pathOut = 'abit.mp4'
        fps = 25
        frame_array = []
        files = [f for f in os.listdir(pathIn) if isfile(join(pathIn, f))]
        # for sorting the file names properly
        # files.sort(key=lambda x: x[5:-4])
        fil = natsort.natsorted(files, reverse=False)
        print(fil)
        # files.sort()
        frame_array = []
        files = [f for f in os.listdir(pathIn) if isfile(join(pathIn, f))]
        # for sorting the file names properly
        files.sort(key=lambda x: x[5:-4])
        for i in range(len(files)):
            filename = pathIn + fil[i]
            # reading each files
            # print(filename)
            img = cv2.imread(filename)
            height, width, layers = img.shape
            size = (width, height)

            # inserting the frames into an image array
            frame_array.append(img)
        out = cv2.VideoWriter(pathOut, cv2.VideoWriter_fourcc(*'DIVX'), fps, size)
        for i in range(len(frame_array)):
            # writing to a image array
            out.write(frame_array[i])
        out.release()
    def aesencr(self):

        #tkinter.messagebox.showinfo("SAMPLE")
        class AESCipher:
            def __init__(self, key):
                self.key = md5(key.encode('utf8')).digest()

            def encrypt(self, data):
                iv = get_random_bytes(AES.block_size)
                self.cipher = AES.new(self.key, AES.MODE_CBC, iv)
                return b64encode(iv + self.cipher.encrypt(pad(data.encode('utf-8'),
                                                              AES.block_size)))

            def decrypt(self, data):
                raw = b64decode(data)
                self.cipher = AES.new(self.key, AES.MODE_CBC, raw[:AES.block_size])
                return unpad(self.cipher.decrypt(raw[AES.block_size:]), AES.block_size)

        if __name__ == '__main__':
            print('TESTING ENCRYPTION')
            fr = input("Enter the frame name with extension..:")
            msg = input('Message...: ')
            pwd = input('Password..: ')
            text = AESCipher(pwd).encrypt(msg).decode('utf-8')
            print('Ciphertext:', text)

            from stegano import lsb

            secret = lsb.hide("C:/Users/jithu/PycharmProjects/j/im/" + fr, text)
            sa = input("Enter the image name with extension to be saved..:")
            secret.save("./im/" + sa)
            clear_message = lsb.reveal("C:/Users/jithu/PycharmProjects/j/im/" + sa)
            print("successfully inserted text= ", clear_message)

    def toframe(self):
        def FrameCapture(path):
            # Path to video file
            vidObj = cv2.VideoCapture(path)

            # Used as counter variable
            count = 0

            # checks whether frames were extracted
            success = 1

            while success:
                # vidObj object calls read
                # function extract frames
                success, image = vidObj.read()

                # Saves the frames with frame-count
                cv2.imwrite("frame%d.png" % count, image)

                count += 1

        # Driver Code
        if __name__ == '__main__':
            # Calling the function
            FrameCapture("hello.mp4")
    def hidee(self):
        self.Text1.configure(elide=True)
    def exitt(self):
        exit()
    def chc(self):
        os.system("q.py")
if __name__ == '__main__':
    vp_start_gui()





